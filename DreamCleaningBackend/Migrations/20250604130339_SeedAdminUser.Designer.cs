// <auto-generated />
using System;
using DreamCleaningBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DreamCleaningBackend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250604130339_SeedAdminUser")]
    partial class SeedAdminUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DreamCleaningBackend.Models.Apartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("AptSuite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Apartments");
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.ExtraService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("HasHours")
                        .HasColumnType("bit");

                    b.Property<bool>("HasQuantity")
                        .HasColumnType("bit");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailableForAll")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeepCleaning")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSameDayService")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuperDeepCleaning")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceMultiplier")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("ExtraServices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 4, 13, 3, 39, 180, DateTimeKind.Utc).AddTicks(5695),
                            Description = "Thorough cleaning of all surfaces and hard-to-reach areas",
                            DisplayOrder = 1,
                            Duration = 60,
                            HasHours = false,
                            HasQuantity = false,
                            Icon = "deep-cleaning.png",
                            IsActive = true,
                            IsAvailableForAll = true,
                            IsDeepCleaning = true,
                            IsSameDayService = false,
                            IsSuperDeepCleaning = false,
                            Name = "Deep Cleaning",
                            Price = 50m,
                            PriceMultiplier = 1.5m
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 4, 13, 3, 39, 180, DateTimeKind.Utc).AddTicks(5700),
                            Description = "Most intensive cleaning service available",
                            DisplayOrder = 2,
                            Duration = 120,
                            HasHours = false,
                            HasQuantity = false,
                            Icon = "super-deep-cleaning.png",
                            IsActive = true,
                            IsAvailableForAll = true,
                            IsDeepCleaning = false,
                            IsSameDayService = false,
                            IsSuperDeepCleaning = true,
                            Name = "Super Deep Cleaning",
                            Price = 100m,
                            PriceMultiplier = 2.0m
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 4, 13, 3, 39, 180, DateTimeKind.Utc).AddTicks(5702),
                            Description = "Get your cleaning done today",
                            DisplayOrder = 3,
                            Duration = 0,
                            HasHours = false,
                            HasQuantity = false,
                            Icon = "same-day.png",
                            IsActive = true,
                            IsAvailableForAll = true,
                            IsDeepCleaning = false,
                            IsSameDayService = true,
                            IsSuperDeepCleaning = false,
                            Name = "Same Day Service",
                            Price = 75m,
                            PriceMultiplier = 1.0m
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 4, 13, 3, 39, 180, DateTimeKind.Utc).AddTicks(5705),
                            Description = "Interior window cleaning",
                            DisplayOrder = 4,
                            Duration = 20,
                            HasHours = false,
                            HasQuantity = true,
                            Icon = "window-cleaning.png",
                            IsActive = true,
                            IsAvailableForAll = true,
                            IsDeepCleaning = false,
                            IsSameDayService = false,
                            IsSuperDeepCleaning = false,
                            Name = "Window Cleaning",
                            Price = 15m,
                            PriceMultiplier = 1.0m
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 4, 13, 3, 39, 180, DateTimeKind.Utc).AddTicks(5709),
                            Description = "Spot cleaning of walls",
                            DisplayOrder = 5,
                            Duration = 30,
                            HasHours = false,
                            HasQuantity = true,
                            Icon = "wall-cleaning.png",
                            IsActive = true,
                            IsAvailableForAll = true,
                            IsDeepCleaning = false,
                            IsSameDayService = false,
                            IsSuperDeepCleaning = false,
                            Name = "Wall Cleaning",
                            Price = 20m,
                            PriceMultiplier = 1.0m
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 6, 4, 13, 3, 39, 180, DateTimeKind.Utc).AddTicks(5711),
                            Description = "Professional organizing of your space",
                            DisplayOrder = 6,
                            Duration = 30,
                            HasHours = true,
                            HasQuantity = false,
                            Icon = "organizing.png",
                            IsActive = true,
                            IsAvailableForAll = true,
                            IsDeepCleaning = false,
                            IsSameDayService = false,
                            IsSuperDeepCleaning = false,
                            Name = "Organizing Service",
                            Price = 30m,
                            PriceMultiplier = 1.0m
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 6, 4, 13, 3, 39, 180, DateTimeKind.Utc).AddTicks(5715),
                            Description = "Washing and folding service",
                            DisplayOrder = 7,
                            Duration = 45,
                            HasHours = false,
                            HasQuantity = true,
                            Icon = "laundry.png",
                            IsActive = true,
                            IsAvailableForAll = false,
                            IsDeepCleaning = false,
                            IsSameDayService = false,
                            IsSuperDeepCleaning = false,
                            Name = "Laundry Service",
                            Price = 25m,
                            PriceMultiplier = 1.0m,
                            ServiceTypeId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 6, 4, 13, 3, 39, 180, DateTimeKind.Utc).AddTicks(5717),
                            Description = "Deep cleaning inside and outside",
                            DisplayOrder = 8,
                            Duration = 30,
                            HasHours = false,
                            HasQuantity = false,
                            Icon = "fridge-cleaning.png",
                            IsActive = true,
                            IsAvailableForAll = true,
                            IsDeepCleaning = false,
                            IsSameDayService = false,
                            IsSuperDeepCleaning = false,
                            Name = "Refrigerator Cleaning",
                            Price = 35m,
                            PriceMultiplier = 1.0m
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 6, 4, 13, 3, 39, 180, DateTimeKind.Utc).AddTicks(5719),
                            Description = "Deep cleaning of oven interior",
                            DisplayOrder = 9,
                            Duration = 45,
                            HasHours = false,
                            HasQuantity = false,
                            Icon = "oven-cleaning.png",
                            IsActive = true,
                            IsAvailableForAll = true,
                            IsDeepCleaning = false,
                            IsSameDayService = false,
                            IsSuperDeepCleaning = false,
                            Name = "Oven Cleaning",
                            Price = 40m,
                            PriceMultiplier = 1.0m
                        });
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.Frequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("FrequencyDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Frequencies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 4, 13, 3, 39, 180, DateTimeKind.Utc).AddTicks(5496),
                            Description = "Single cleaning service",
                            DiscountPercentage = 0m,
                            DisplayOrder = 1,
                            FrequencyDays = 0,
                            IsActive = true,
                            Name = "One Time"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 4, 13, 3, 39, 180, DateTimeKind.Utc).AddTicks(5499),
                            Description = "Cleaning every week",
                            DiscountPercentage = 15m,
                            DisplayOrder = 2,
                            FrequencyDays = 7,
                            IsActive = true,
                            Name = "Weekly"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 4, 13, 3, 39, 180, DateTimeKind.Utc).AddTicks(5501),
                            Description = "Cleaning every two weeks",
                            DiscountPercentage = 10m,
                            DisplayOrder = 3,
                            FrequencyDays = 14,
                            IsActive = true,
                            Name = "Bi-Weekly"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 4, 13, 3, 39, 180, DateTimeKind.Utc).AddTicks(5560),
                            Description = "Cleaning once a month",
                            DiscountPercentage = 5m,
                            DisplayOrder = 4,
                            FrequencyDays = 30,
                            IsActive = true,
                            Name = "Monthly"
                        });
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApartmentId")
                        .HasColumnType("int");

                    b.Property<string>("AptSuite")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContactFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EntryMethod")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FrequencyId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentIntentId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PromoCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ServiceAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ServiceDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("ServiceTime")
                        .HasColumnType("time");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Tips")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalDuration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ApartmentId");

                    b.HasIndex("FrequencyId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.OrderExtraService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("ExtraServiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("Hours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExtraServiceId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderExtraServices");
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.OrderService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceMultiplier")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ServiceId");

                    b.ToTable("OrderServices");
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.PromoCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentUsageCount")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPercentage")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxUsageCount")
                        .HasColumnType("int");

                    b.Property<int?>("MaxUsagePerUser")
                        .HasColumnType("int");

                    b.Property<decimal?>("MinimumOrderAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("PromoCodes");
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("InputType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRangeInput")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxValue")
                        .HasColumnType("int");

                    b.Property<int?>("MinValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ServiceKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("StepValue")
                        .HasColumnType("int");

                    b.Property<int>("TimeDuration")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServiceKey");

                    b.HasIndex("ServiceTypeId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 25m,
                            CreatedAt = new DateTime(2025, 6, 4, 13, 3, 39, 180, DateTimeKind.Utc).AddTicks(5632),
                            DisplayOrder = 1,
                            InputType = "dropdown",
                            IsActive = true,
                            IsRangeInput = false,
                            MaxValue = 6,
                            MinValue = 0,
                            Name = "Bedrooms",
                            ServiceKey = "bedrooms",
                            ServiceTypeId = 1,
                            StepValue = 1,
                            TimeDuration = 30
                        },
                        new
                        {
                            Id = 2,
                            Cost = 35m,
                            CreatedAt = new DateTime(2025, 6, 4, 13, 3, 39, 180, DateTimeKind.Utc).AddTicks(5636),
                            DisplayOrder = 2,
                            InputType = "dropdown",
                            IsActive = true,
                            IsRangeInput = false,
                            MaxValue = 5,
                            MinValue = 1,
                            Name = "Bathrooms",
                            ServiceKey = "bathrooms",
                            ServiceTypeId = 1,
                            StepValue = 1,
                            TimeDuration = 45
                        },
                        new
                        {
                            Id = 3,
                            Cost = 0.10m,
                            CreatedAt = new DateTime(2025, 6, 4, 13, 3, 39, 180, DateTimeKind.Utc).AddTicks(5640),
                            DisplayOrder = 3,
                            InputType = "slider",
                            IsActive = true,
                            IsRangeInput = true,
                            MaxValue = 5000,
                            MinValue = 400,
                            Name = "Square Feet",
                            ServiceKey = "sqft",
                            ServiceTypeId = 1,
                            StepValue = 100,
                            TimeDuration = 1,
                            Unit = "per sqft"
                        },
                        new
                        {
                            Id = 4,
                            Cost = 40m,
                            CreatedAt = new DateTime(2025, 6, 4, 13, 3, 39, 180, DateTimeKind.Utc).AddTicks(5662),
                            DisplayOrder = 1,
                            InputType = "dropdown",
                            IsActive = true,
                            IsRangeInput = false,
                            MaxValue = 10,
                            MinValue = 1,
                            Name = "Cleaners",
                            ServiceKey = "cleaners",
                            ServiceTypeId = 2,
                            StepValue = 1,
                            TimeDuration = 0,
                            Unit = "per hour"
                        },
                        new
                        {
                            Id = 5,
                            Cost = 0m,
                            CreatedAt = new DateTime(2025, 6, 4, 13, 3, 39, 180, DateTimeKind.Utc).AddTicks(5666),
                            DisplayOrder = 2,
                            InputType = "dropdown",
                            IsActive = true,
                            IsRangeInput = false,
                            MaxValue = 8,
                            MinValue = 2,
                            Name = "Hours",
                            ServiceKey = "hours",
                            ServiceTypeId = 2,
                            StepValue = 1,
                            TimeDuration = 60
                        });
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.ServiceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasePrice = 120m,
                            CreatedAt = new DateTime(2025, 6, 4, 13, 3, 39, 180, DateTimeKind.Utc).AddTicks(5600),
                            Description = "Complete home cleaning service",
                            DisplayOrder = 1,
                            IsActive = true,
                            Name = "Residential Cleaning"
                        },
                        new
                        {
                            Id = 2,
                            BasePrice = 200m,
                            CreatedAt = new DateTime(2025, 6, 4, 13, 3, 39, 180, DateTimeKind.Utc).AddTicks(5603),
                            Description = "Professional office cleaning service",
                            DisplayOrder = 2,
                            IsActive = true,
                            Name = "Office Cleaning"
                        });
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FrequencyDays")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PriceModifier")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Single cleaning service",
                            DiscountPercentage = 0m,
                            FrequencyDays = 0,
                            IsActive = true,
                            Name = "One-Time",
                            PriceModifier = 1.0m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Cleaning every week",
                            DiscountPercentage = 15m,
                            FrequencyDays = 7,
                            IsActive = true,
                            Name = "Weekly",
                            PriceModifier = 1.0m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Cleaning every two weeks",
                            DiscountPercentage = 8m,
                            FrequencyDays = 14,
                            IsActive = true,
                            Name = "Bi-Weekly",
                            PriceModifier = 1.0m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Cleaning once a month",
                            DiscountPercentage = 3m,
                            FrequencyDays = 30,
                            IsActive = true,
                            Name = "Monthly",
                            PriceModifier = 1.0m
                        });
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ExternalAuthId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("FirstTimeOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.Apartment", b =>
                {
                    b.HasOne("DreamCleaningBackend.Models.User", "User")
                        .WithMany("Apartments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.ExtraService", b =>
                {
                    b.HasOne("DreamCleaningBackend.Models.ServiceType", "ServiceType")
                        .WithMany("ExtraServices")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.Order", b =>
                {
                    b.HasOne("DreamCleaningBackend.Models.Apartment", "Apartment")
                        .WithMany()
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DreamCleaningBackend.Models.Frequency", "Frequency")
                        .WithMany("Orders")
                        .HasForeignKey("FrequencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DreamCleaningBackend.Models.ServiceType", "ServiceType")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DreamCleaningBackend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Apartment");

                    b.Navigation("Frequency");

                    b.Navigation("ServiceType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.OrderExtraService", b =>
                {
                    b.HasOne("DreamCleaningBackend.Models.ExtraService", "ExtraService")
                        .WithMany("OrderExtraServices")
                        .HasForeignKey("ExtraServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DreamCleaningBackend.Models.Order", "Order")
                        .WithMany("OrderExtraServices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExtraService");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.OrderService", b =>
                {
                    b.HasOne("DreamCleaningBackend.Models.Order", "Order")
                        .WithMany("OrderServices")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DreamCleaningBackend.Models.Service", "Service")
                        .WithMany("OrderServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.Service", b =>
                {
                    b.HasOne("DreamCleaningBackend.Models.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceType");
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.User", b =>
                {
                    b.HasOne("DreamCleaningBackend.Models.Subscription", "Subscription")
                        .WithMany("Users")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.ExtraService", b =>
                {
                    b.Navigation("OrderExtraServices");
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.Frequency", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.Order", b =>
                {
                    b.Navigation("OrderExtraServices");

                    b.Navigation("OrderServices");
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.Service", b =>
                {
                    b.Navigation("OrderServices");
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.ServiceType", b =>
                {
                    b.Navigation("ExtraServices");

                    b.Navigation("Orders");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.Subscription", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DreamCleaningBackend.Models.User", b =>
                {
                    b.Navigation("Apartments");
                });
#pragma warning restore 612, 618
        }
    }
}
